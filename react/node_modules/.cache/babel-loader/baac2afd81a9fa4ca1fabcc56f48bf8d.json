{"ast":null,"code":"import axios from \"axios\";\nexport const HANDLE_TEXT = 'HANDLE_TEXT';\nexport const ADD_TODO = 'ADD_TODO';\nexport const SEARCH_TODO = 'SEARCH_TODO';\nexport const HANDLE_SEARCH_TEXT = 'HANDLE_SEARCH_TEXT';\nexport const DELETE_ITEM_TODO = 'DELETE_ITEM_TODO';\nexport const GET_TEST = 'GET_TEST';\nexport const ACTION_DONE = 'ACTION_DONE';\nconst BACKEND_URL = `http://localhost:3080/todo`;\nexport const handleText = text => ({\n  type: HANDLE_TEXT,\n  payload: text\n});\nexport const addTodo = () => ({\n  type: ADD_TODO\n});\nexport const actionDone = () => ({\n  type: ACTION_DONE\n});\n\nconst getTodoAction = todos => ({\n  type: GET_TEST,\n  payload: todos\n});\n\nexport const getTodo = () => async dispatch => {\n  const fetchData = await axios.get(`${BACKEND_URL}?limit=100`);\n  const data = await fetchData.data;\n  await dispatch(getTodoAction(data));\n};\nexport const postTodo = content => async dispatch => {\n  const fetchData = await axios.post(BACKEND_URL, {\n    content\n  });\n  const data = await fetchData.data;\n  console.log(data);\n};\nexport const putDoneTodo = (id, done) => async dispatch => {\n  const fetchData = await axios.put(`${BACKEND_URL}/${id}&_method=PUT`, {\n    done\n  });\n  console.log(fetchData);\n};\nexport const putImportantTodo = (id, important) => dispatch => {\n  axios.put(`${BACKEND_URL}/${id}`, {\n    important\n  }).then(res => console.log(res));\n};\nexport const deleteTodo = id => dispatch => {\n  axios.put(`${BACKEND_URL}/${id}`, {\n    method: \"delete\"\n  }).then(res => console.log(res));\n};\nexport const handleSearchText = text => ({\n  type: HANDLE_SEARCH_TEXT,\n  payload: text\n});\nexport const searchTodo = () => ({\n  type: SEARCH_TODO\n});\nexport const deleteItemTodo = index => {\n  return {\n    type: DELETE_ITEM_TODO,\n    payload: index\n  };\n};","map":{"version":3,"sources":["/home/samil/project/TodoList/react/src/redux/actions/todosAction.js"],"names":["axios","HANDLE_TEXT","ADD_TODO","SEARCH_TODO","HANDLE_SEARCH_TEXT","DELETE_ITEM_TODO","GET_TEST","ACTION_DONE","BACKEND_URL","handleText","text","type","payload","addTodo","actionDone","getTodoAction","todos","getTodo","dispatch","fetchData","get","data","postTodo","content","post","console","log","putDoneTodo","id","done","put","putImportantTodo","important","then","res","deleteTodo","method","handleSearchText","searchTodo","deleteItemTodo","index"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport const HANDLE_TEXT = 'HANDLE_TEXT'\nexport const ADD_TODO = 'ADD_TODO'\nexport const SEARCH_TODO = 'SEARCH_TODO'\nexport const HANDLE_SEARCH_TEXT = 'HANDLE_SEARCH_TEXT'\nexport const DELETE_ITEM_TODO = 'DELETE_ITEM_TODO'\nexport const GET_TEST = 'GET_TEST'\nexport const ACTION_DONE = 'ACTION_DONE'\n\nconst BACKEND_URL = `http://localhost:3080/todo`\n\nexport const handleText = (text) => ({type: HANDLE_TEXT, payload: text})\nexport const addTodo = () => ({type: ADD_TODO})\nexport const actionDone = () => ({type: ACTION_DONE})\nconst getTodoAction = (todos)=> ({type:GET_TEST, payload:todos})\n\n\nexport const getTodo = () => async (dispatch)=>{\n        const fetchData = await axios.get(`${BACKEND_URL}?limit=100`)\n        const data = await fetchData.data\n        await dispatch(getTodoAction(data))\n}\nexport const postTodo = (content) => async (dispatch)=>{\n   const fetchData = await axios.post(BACKEND_URL, {content})\n    const data = await fetchData.data\n    console.log(data)\n}\n\nexport const putDoneTodo = (id,done) => async (dispatch)=> {\n   const fetchData = await axios.put(`${BACKEND_URL}/${id}&_method=PUT`, {done})\n        console.log(fetchData)\n}\nexport const putImportantTodo = (id,important) => (dispatch)=> {\n    axios.put(`${BACKEND_URL}/${id}`, {important})\n        .then(res => console.log(res))\n\n}\nexport const deleteTodo = (id) => (dispatch)=> {\n    axios.put(`${BACKEND_URL}/${id}`,{method:\"delete\"})\n        .then(res => console.log(res))\n\n}\nexport const handleSearchText = (text) => ({type: HANDLE_SEARCH_TEXT, payload: text})\n\nexport const searchTodo = () => ({type: SEARCH_TODO})\n\nexport const deleteItemTodo = (index) => {\n    return {\n        type: DELETE_ITEM_TODO,\n        payload: index\n    }\n}\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}